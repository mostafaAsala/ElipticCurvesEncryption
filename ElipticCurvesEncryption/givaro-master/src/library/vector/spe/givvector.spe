// ==========================================================================
// $Source: /var/lib/cvs/Givaro/src/library/vector/spe/givvector.spe,v $
// Copyright(c)'1994-2009 by The Givaro group
// This file is part of Givaro.
// Givaro is governed by the CeCILL-B license under French law
// and abiding by the rules of distribution of free software. 
// see the COPYRIGHT file for more details.
// Authors: T. Gautier
// $Id: givvector.spe,v 1.4 2009-09-17 14:28:23 jgdumas Exp $
// ==========================================================================
// Description: specialization of for vector over Zpz
#ifndef _GIV_VECTOR_H__ZPZ
#define _GIV_VECTOR_H__ZPZ

#include "zpz.h"

// ==========================================================================
// --
// -- Vector<T,Allocator>:
// -- Currently, no allocator are defined. 
// --
// ==========================================================================
template<>
class Vector<Zpz> {
public :
  typedef Zpz  		Type_t;
  typedef size_t	Indice_t;
  typedef Zpz* 		Iterator_t;
  typedef const Zpz* 	constIterator_t;
  
  // -- Dstor 
  ~Vector();

  // -- Cstor of a new vector of size s
  Vector(size_t s =0, Zpz::Modulo_t m =0);
  Vector(size_t s, const Zpz& val );

  // -- Should provide an cstor with iterators as input

  // -- Cstor of recopy: default is with copy
  Vector(const Vector<Zpz>& V, givWithCopy xx = givWithCopy() ); 
  Vector(const Vector<Zpz::Modulo_t>& V, Zpz::Modulo_t m, 
         givWithCopy xx = givWithCopy() );
  Vector(const Vector<Zpz::Modulo_t>& V, Zpz::Modulo_t m, givNoCopy );

  Vector(const Array0<Zpz>& A, givWithCopy xx = givWithCopy());
  Vector(const Array0<Zpz::Modulo_t>& A, Zpz::Modulo_t m, 
         givWithCopy xx = givWithCopy());
  Vector(const Array0<Zpz::Modulo_t>& A, Zpz::Modulo_t m, givNoCopy );

  // -- Cstor with view: physical copy of the corresponding
  // Elements into the new vector. 
  template<class View1>
  Vector(const Vector<Zpz>& V, View1 s);
  template<class View1>
  Vector(const Array0<Zpz>& V, View1 s);
  
  // -- Cstor of recopy with recopy
  template<class View1>
  Vector(const SubVector<Zpz,View1>& V );
  template<class View1, class View2>
  Vector(const SubVector<Zpz,View1>& V, View2 view2 );

  // -- assignment operator: 
  Vector<Zpz>& operator= (const Type_t& V);

  // -- assignment operator: physical copy
  Vector<Zpz>& operator= (const Vector<Zpz>& V);
  template<class View1>
  Vector<Zpz>& operator= (const SubVector<Zpz,View1>& sV);

   // -- Comparizons
  int operator== (const Vector<Zpz>& A) const;
  int operator!= (const Vector<Zpz>& A) const;
  template<class View1>
  int operator== (const SubVector<Zpz, View1>& A) const;
  template<class View1>
  int operator!= (const SubVector<Zpz, View1>& A) const;

 // -- return the last index of a vector
  size_t dim() const;

  // -- Access operators: return an reference to an subarray, ie a SubVector
  template<class View1>
  SubVector<Zpz,View1> operator()( View1 );
  template<class View1>
  const SubVector<Zpz,View1> operator()( View1 ) const;

  // -- Access to entries of a vector
  const Zpz& operator[]( Indice_t ) const;
  Zpz& operator[]( Indice_t );

  // -- Basic iterator:
  Iterator_t begin(); 
  Iterator_t end(); 
  constIterator_t begin() const; 
  constIterator_t end() const; 

public:
  Modulo_r              _modulus;
  Array0<Zpz::Modulo_t> _array;
};


#include "spe/givvectops.spe"

#endif
