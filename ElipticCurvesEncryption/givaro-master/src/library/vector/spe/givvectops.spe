// ==========================================================================
// $Source: /var/lib/cvs/Givaro/src/library/vector/spe/givvectops.spe,v $
// Copyright(c)'1994-2009 by The Givaro group
// This file is part of Givaro.
// Givaro is governed by the CeCILL-B license under French law
// and abiding by the rules of distribution of free software. 
// see the COPYRIGHT file for more details.
// Authors: T. Gautier
// - Specialization of vector operations over Zpz
// $Id: givvectops.spe,v 1.3 2009-09-17 14:28:23 jgdumas Exp $
// ==========================================================================


template<>
inline Vector<Zpz>& operator+=(Vector<Zpz>& op1, const Vector<Zpz>& op2)
{ 
  GIVARO_ASSERT((op1.dim() == op2.dim()) && (res.dim() ==op1.dim()), "[inVectorOp] bad size of operand");
  AddOp<Zpz> opcode;
  map_iter( opcode, op1.begin(), op1.end(), op2.begin());
  return op1;
}

template<class T>
inline Vector<Zpz>& operator+=(Vector<Zpz>& op1, const T& op2)
{ 
  Curried2<AddOp<Zpz> > opcode(op2);
  map_iter( opcode, op1.begin(), op1.end());
  return op1;
}

template<class T>
inline Vector<Zpz>& operator-=(Vector<Zpz>& op1, const Vector<Zpz>& op2)
{
  GIVARO_ASSERT((op1.dim() == op2.dim()) && (res.dim() ==op1.dim()), "[inVectorOp] bad size of operand");
  SubOp<Zpz> opcode;
  map_iter( opcode, op1.begin(), op1.end(), op2.begin());
  return op1;
}

template<class T>
inline Vector<Zpz>& operator-=(Vector<Zpz>& op1, const T& op2)
{ 
  Curried2<SubOp<Zpz> > opcode(op2);
  map_iter( opcode, op1.begin(), op1.end());
  return op1;
}

template<class T>
inline Vector<Zpz>& operator*=(Vector<Zpz>& op1, const Vector<Zpz>& op2)
{
  GIVARO_ASSERT((op1.dim() == op2.dim()) && (res.dim() ==op1.dim()), "[inVectorOp] bad size of operand");
  MulOp<Zpz> opcode;
  map_iter( opcode, op1.begin(), op1.end(), op2.begin());
  return op1;
}

template<class T>
inline Vector<Zpz>& operator*=(Vector<Zpz>& op1, const T& op2)
{ 
  Curried2<MulOp<Zpz> > opcode(op2);
  map_iter( opcode, op1.begin(), op1.end());
  return op1;
}

template<class T>
inline Vector<Zpz>& operator/=(Vector<Zpz>& op1, const Vector<Zpz>& op2)
{
  GIVARO_ASSERT((op1.dim() == op2.dim()) && (res.dim() ==op1.dim()), "[inVectorOp] bad size of operand");
  DivOp<Zpz> opcode;
  map_iter( opcode, op1.begin(), op1.end(), op2.begin());
  return op1;
}

template<class T>
inline Vector<Zpz>& operator/=(Vector<Zpz>& op1, const T& op2)
{
  Curried2<DivOp<Zpz> > opcode(op2);
  map_iter( opcode, op1.begin(), op1.end());
  return op1;
}

// -- binary op
template<class T>
inline Vector<Zpz> operator+(const Vector<Zpz>& op1, const Vector<Zpz>& op2)
{ 
  GIVARO_ASSERT((op1.dim() == op2.dim()), "[inVectorOp] bad size of operand");
  Vector<Zpz> res( op1.dim() );
  AddOp<Zpz> opcode; 
  map_iter( opcode, res.begin(), res.end(), op1.begin(), op2.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator+(const Vector<Zpz>& op1, const T& op2)
{ 
  Vector<Zpz> res( op1.dim() );
  Curried3<AddOp<Zpz> > opcode(op2); 
  map_iter( opcode, res.begin(), res.end(), op1.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator+(const T& op1, const Vector<Zpz>& op2)
{ 
  Vector<Zpz> res( op2.dim() );
  Curried2<AddOp<Zpz> > opcode(op1);
  map_iter( opcode, res.begin(), res.end(), op2.begin());
  return res;
}


template<class T>
inline Vector<Zpz> operator-(const Vector<Zpz>& op1, const Vector<Zpz>& op2)
{ 
  GIVARO_ASSERT((op1.dim() == op2.dim()), "[inVectorOp] bad size of operand");
  Vector<Zpz> res( op1.dim() );
  SubOp<Zpz> opcode;
  map_iter( opcode, res.begin(), res.end(), op1.begin(), op2.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator-(const Vector<Zpz>& op1, const T& op2)
{ 
  Vector<Zpz> res( op1.dim() );
  Curried3<SubOp<Zpz> > opcode(op2);
  map_iter( opcode, res.begin(), res.end(), op1.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator-(const T& op1, const Vector<Zpz>& op2)
{ 
  Vector<Zpz> res( op2.dim() );
  Curried2<SubOp<Zpz> > opcode(op1);
  map_iter( opcode, res.begin(), res.end(), op2.begin());
  return res;
}


template<class T>
inline Vector<Zpz> operator*(const Vector<Zpz>& op1, const Vector<Zpz>& op2)
{ 
  GIVARO_ASSERT((op1.dim() == op2.dim()), "[inVectorOp] bad size of operand");
  Vector<Zpz> res( op1.dim() );
  MulOp<Zpz> opcode; 
  map_iter( opcode, res.begin(), res.end(), op1.begin(), op2.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator*(const Vector<Zpz>& op1, const T& op2)
{ 
  Vector<Zpz> res( op1.dim() );
  Curried3<MulOp<Zpz> > opcode(op2);
  map_iter( opcode, res.begin(), res.end(), op1.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator*(const T& op1, const Vector<Zpz>& op2)
{ 
  Vector<Zpz> res( op2.dim() );
  Curried2<MulOp<Zpz> > opcode(op1);
  map_iter( opcode, res.begin(), res.end(), op2.begin());
  return res;
}


template<class T>
inline Vector<Zpz> operator/(const Vector<Zpz>& op1, const Vector<Zpz>& op2)
{ 
  GIVARO_ASSERT((op1.dim() == op2.dim()), "[inVectorOp] bad size of operand");
  Vector<Zpz> res( op1.dim() );
  DivOp<Zpz> opcode;
  map_iter( opcode, res.begin(), res.end(), op1.begin(), op2.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator/(const Vector<Zpz>& op1, const T& op2)
{
  Vector<Zpz> res( op1.dim() );
  Curried3<DivOp<Zpz> > opcode(op2);
  map_iter( opcode, res.begin(), res.end(), op1.begin());
  return res;
}

template<class T>
inline Vector<Zpz> operator/(const T& op1, const Vector<Zpz>& op2)
{
  Vector<Zpz> res( op2.dim() );
  Curried2<DivOp<Zpz> > opcode(op1);
  map_iter( opcode, res.begin(), res.end(), op2.begin());
  return res;
}

template<class T>
inline T dotprod( const Vector<Zpz>& op1, const Vector<Zpz>& op2)
{
//  GIVARO_ASSERT((op1.dim() == op2.dim()), "[inVectorOp] bad size of operand");
  T res = Neutral::zero;
  Vector<Zpz>::constIterator_t i1 = op1.begin();
  Vector<Zpz>::constIterator_t e1 = op1.end();
  Vector<Zpz>::constIterator_t i2 = op2.begin();
  for ( ; i1 != e1; ) res += *i1++ *  *i2++;
  return res;
}
